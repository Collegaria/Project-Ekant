# -*- coding: utf-8 -*-
"""IsolationWithExamplesAndGraphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aHOK6WMEwLT6jMwr2QQCGfOeG7pZCNRF
"""

!pip install simple-diarizer

from simple_diarizer.diarizer import Diarizer
from simple_diarizer.utils import (check_wav_16khz_mono, convert_wavfile,
                                   waveplot, combined_waveplot, waveplot_perspeaker)

import os
import tempfile
from pprint import pprint

import matplotlib.pyplot as plt
import soundfile as sf

from IPython.display import Audio, display, HTML
from tqdm.autonotebook import tqdm

!pip install youtube-dl validators
import subprocess
import validators


def download_youtube_wav(youtube_id, outfolder='./', overwrite=True):
    """
    Download the audio for a YouTube id/URL
    """
    if validators.url(youtube_id):
        youtube_id = video_id(youtube_id)

    os.makedirs(outfolder, exist_ok=True)

    outfile = os.path.join(outfolder, '{}.wav'.format(youtube_id))
    if not overwrite:
        if os.path.isfile(outfile):
            return outfile

    cmd = "youtube-dl --no-continue --extract-audio --audio-format wav -o '{}' {}".format(
        outfile, youtube_id)
    subprocess.Popen(cmd, shell=True).wait()

    assert os.path.isfile(outfile), "Couldn't find expected outfile, something went wrong"
    return outfile

"""# Specify YouTube video, and specify number of speakers


"""

YOUTUBE_ID = "I49VNQ6lmKk" # The YouTube ID of the video you wish to diarize
NUM_SPEAKERS = 2 # The number of speakers
HTML('<iframe width="560" height="315" src="https://www.youtube.com/embed/{}?rel=0&amp;controls=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>'.format(YOUTUBE_ID))

with tempfile.TemporaryDirectory() as outdir:
    yt_file = download_youtube_wav(YOUTUBE_ID, outdir)

    wav_file = convert_wavfile(yt_file, f"{outdir}/{YOUTUBE_ID}_converted.wav")
    signal, fs = sf.read(wav_file)

    print(f"wav file: {wav_file}")

    diar = Diarizer(
        embed_model='ecapa', # supported types: ['xvec', 'ecapa']
        cluster_method='sc', # supported types: ['ahc', 'sc']
        window=1.5, # size of window to extract embeddings (in seconds)
        period=0.75 # hop of window (in seconds)
    )

    # If using NUM_SPEAKERS
    segments = diar.diarize(wav_file, 
                            num_speakers=NUM_SPEAKERS,
                            outfile=f"{outdir}/{YOUTUBE_ID}.rttm")
    

    ## If NUM_SPEAKERS is unknown
    # segments = diar.diarize(wav_file, 
    #                         num_speakers=None,
    #                         threshold=1e-1,
    #                         outfile=f"{outdir}/{YOUTUBE_ID}.rttm")

segments

"""## The original audio file preview:"""

waveplot(signal, fs, figsize=(20,3))
plt.show()

"""## Visualising Outputs

### Colour-coded waveplot
"""

combined_waveplot(signal, fs, segments, figsize=(10,3), tick_interval=60)
plt.show()

"""### Playing individual per-speaker snippets"""

waveplot_perspeaker(signal, fs, segments)

"""# Helper functions for diarizing YouTube"""

!pip install pytube
from pytube.extract import video_id

def get_youtube_id(url):
    """
    Returns the youtube id for a youtube URL
    """
    return video_id(url)

def download_youtube_wav(youtube_id, outfolder='./', overwrite=True):
    """
    Download the audio for a YouTube id/URL
    """
    if validators.url(youtube_id):
        youtube_id = video_id(youtube_id)

    os.makedirs(outfolder, exist_ok=True)

    outfile = os.path.join(outfolder, '{}.wav'.format(youtube_id))
    if not overwrite:
        if os.path.isfile(outfile):
            return outfile

    cmd = "youtube-dl --no-continue --extract-audio --audio-format wav -o '{}' {}".format(
        outfile, youtube_id)
    subprocess.Popen(cmd, shell=True).wait()

    assert os.path.isfile(outfile), "Couldn't find expected outfile, something went wrong"
    return outfile


def diarize_yt(youtube_url, diar, ns=None):
    youtube_id = get_youtube_id(youtube_url)
    with tempfile.TemporaryDirectory() as outdir:
        print("Downloading wav file...")
        yt_file = download_youtube_wav(youtube_id, outdir)

        wav_file = convert_wavfile(yt_file, f"{outdir}/{youtube_id}_converted.wav")
        signal, fs = sf.read(wav_file)

        print(f"Diarizing {youtube_id}...")
        segments = diar.diarize(wav_file, 
                                num_speakers=ns,
                                outfile=f"{outdir}/{youtube_id}.rttm")
        return segments, (signal, fs)

diar = Diarizer(
                embed_model='ecapa', # supported types: ['xvec', 'ecapa']
                cluster_method='sc', # supported types: ['ahc', 'sc']
                window=1.5, # size of window to extract embeddings (in seconds)
                period=0.75 # hop of window (in seconds)
                )

"""## It's Always Sunny in Philadelphia (Pepe Silvia)

"""

iasip_video = "https://www.youtube.com/watch?v=ghrdSTC66MA"
HTML('<iframe width="560" height="315" src="https://www.youtube.com/embed/{}?rel=0&amp;controls=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>'.format(get_youtube_id(iasip_video)))

iasip_segments, (iasip_signal, fs) = diarize_yt(iasip_video, diar, 2)

combined_waveplot(iasip_signal, fs, iasip_segments, tick_interval=30)
plt.show()

waveplot_perspeaker(iasip_signal, fs, iasip_segments)

"""Scrolling through the snippets the speaker segments are isolated correctly but the transcripts are not aligned well

## 5 Person Interview
"""

outih_video = "https://youtu.be/h_W12HmsIMY"
HTML('<iframe width="560" height="315" src="https://www.youtube.com/embed/{}?rel=0&amp;controls=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>'.format(get_youtube_id(outih_video)))

outih_segments, (outih_signal, fs) = diarize_yt(outih_video, diar, 5)

combined_waveplot(outih_signal, fs, outih_segments, tick_interval=120)
plt.show()

waveplot_perspeaker(outih_signal, fs, outih_segments[:30])

